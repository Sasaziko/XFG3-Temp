names(values) = c("lambda.bic", "act.set.bic", "res.norm.bic", "coeff.norm.bic",
"cond.num.bic", "max.eigen.bic", "intercept.bic","mean.lb.bic",
"mean.as.bic", "mean.rn.bic", "mean.cn.bic", "mean.k.bic",
"mean.me.bic", "mean.b0.bic", "med.lb.bic", "med.as.bic", "med.rn.bic",
"med.cn.bic", "med.k.bic", "med.me.bic", "med.b0.bic", "lambda.gcv",
"act.set.gcv", "res.norm.gcv", "coeff.norm.gcv", "cond.num.gcv",
"max.eigen.gcv", "intercept.gcv","mean.lb.gcv", "mean.as.gcv",
"mean.rn.gcv", "mean.cn.gcv", "mean.k.gcv", "mean.me.gcv",
"mean.b0.gcv", "med.lb.gcv", "med.as.gcv", "med.rn.gcv", "med.cn.gcv",
"med.k.gcv", "med.me.gcv", "med.b0.gcv")
return(values)
}
res.Qlasso = function(n.cores, input){
res.norm.bic   = numeric(0)
coeff.norm.bic = numeric(0)
lambda.bic     = numeric(0)
act.set.bic    = numeric(0)
cond.num.bic   = numeric(0)
max.eigen.bic  = numeric(0)
intercept.bic  = numeric(0)
res.norm.gcv   = numeric(0)
coeff.norm.gcv = numeric(0)
lambda.gcv     = numeric(0)
act.set.gcv    = numeric(0)
cond.num.gcv   = numeric(0)
max.eigen.gcv  = numeric(0)
intercept.gcv  = numeric(0)
# Collect results from all the cores
for (i in 1:n.cores){
lambda.bic     = cbind(lambda.bic, input[[i]]$lambda.bic)
act.set.bic    = cbind(act.set.bic, input[[i]]$act.set.bic)
res.norm.bic   = cbind(res.norm.bic, input[[i]]$res.norm.bic)
coeff.norm.bic = cbind(coeff.norm.bic, input[[i]]$coeff.norm.bic)
cond.num.bic   = cbind(cond.num.bic, input[[i]]$cond.num.bic)
max.eigen.bic  = cbind(max.eigen.bic, input[[i]]$max.eigen.bic)
intercept.bic  = cbind(intercept.bic, input[[i]]$intercept.bic)
lambda.gcv     = cbind(lambda.gcv, input[[i]]$lambda.gcv)
act.set.gcv    = cbind(act.set.gcv, input[[i]]$act.set.gcv)
res.norm.gcv   = cbind(res.norm.gcv, input[[i]]$res.norm.gcv)
coeff.norm.gcv = cbind(coeff.norm.gcv, input[[i]]$coeff.norm.gcv)
cond.num.gcv   = cbind(cond.num.gcv, input[[i]]$cond.num.gcv)
max.eigen.gcv  = cbind(max.eigen.gcv, input[[i]]$max.eigen.gcv)
intercept.gcv  = cbind(intercept.gcv, input[[i]]$intercept.gcv)
}
mean.rn.bic   = apply(res.norm.bic, 1, mean)
mean.cn.bic   = apply(coeff.norm.bic, 1, mean)
mean.lb.bic   = apply(lambda.bic, 1, mean)
mean.as.bic   = apply(act.set.bic, 1, mean)
mean.k.bic    = apply(cond.num.bic, 1, mean)
mean.me.bic   = apply(max.eigen.bic, 1, mean)
mean.b0.bic   = apply(intercept.bic, 1, mean)
med.rn.bic    = apply(res.norm.bic, 1, median)
med.cn.bic    = apply(coeff.norm.bic, 1, median)
med.lb.bic    = apply(lambda.bic, 1, median)
med.as.bic    = apply(act.set.bic, 1, median)
med.k.bic     = apply(cond.num.bic, 1, median)
med.me.bic    = apply(max.eigen.bic, 1, median)
med.b0.bic    = apply(intercept.bic, 1, median)
mean.rn.gcv   = apply(res.norm.gcv, 1, mean)
mean.cn.gcv   = apply(coeff.norm.gcv, 1, mean)
mean.lb.gcv   = apply(lambda.gcv, 1, mean)
mean.as.gcv   = apply(act.set.gcv, 1, mean)
mean.k.gcv    = apply(cond.num.gcv, 1, mean)
mean.me.gcv   = apply(max.eigen.gcv, 1, mean)
mean.b0.gcv   = apply(intercept.gcv, 1, mean)
med.rn.gcv    = apply(res.norm.gcv, 1, median)
med.cn.gcv    = apply(coeff.norm.gcv, 1, median)
med.lb.gcv    = apply(lambda.gcv, 1, median)
med.as.gcv    = apply(act.set.gcv, 1, median)
med.k.gcv     = apply(cond.num.gcv, 1, median)
med.me.gcv    = apply(max.eigen.gcv, 1, median)
med.b0.gcv    = apply(intercept.gcv, 1, median)
values        = list(lambda.bic, act.set.bic, res.norm.bic, coeff.norm.bic, cond.num.bic,
max.eigen.bic, intercept.bic, mean.lb.bic, mean.as.bic, mean.rn.bic,
mean.cn.bic, mean.k.bic, mean.me.bic, mean.b0.bic, med.lb.bic,
med.as.bic, med.rn.bic, med.cn.bic, med.k.bic, med.me.bic,
med.b0.bic, lambda.gcv, act.set.gcv, res.norm.gcv, coeff.norm.gcv,
cond.num.gcv,  max.eigen.gcv, intercept.gcv, mean.lb.gcv,
mean.as.gcv, mean.rn.gcv, mean.cn.gcv, mean.k.gcv, mean.me.gcv,
mean.b0.gcv, med.lb.gcv, med.as.gcv, med.rn.gcv, med.cn.gcv,
med.k.gcv, med.me.gcv, med.b0.gcv)
names(values) = c("lambda.bic", "act.set.bic", "res.norm.bic", "coeff.norm.bic",
"cond.num.bic", "max.eigen.bic", "intercept.bic","mean.lb.bic",
"mean.as.bic", "mean.rn.bic", "mean.cn.bic", "mean.k.bic",
"mean.me.bic", "mean.b0.bic", "med.lb.bic", "med.as.bic", "med.rn.bic",
"med.cn.bic", "med.k.bic", "med.me.bic", "med.b0.bic", "lambda.gcv",
"act.set.gcv", "res.norm.gcv", "coeff.norm.gcv", "cond.num.gcv",
"max.eigen.gcv", "intercept.gcv","mean.lb.gcv", "mean.as.gcv",
"mean.rn.gcv", "mean.cn.gcv", "mean.k.gcv", "mean.me.gcv",
"mean.b0.gcv", "med.lb.gcv", "med.as.gcv", "med.rn.gcv", "med.cn.gcv",
"med.k.gcv", "med.me.gcv", "med.b0.gcv")
return(values)
}
res.Qlasso = function(n.cores, input){
res.norm.bic   = numeric(0)
coeff.norm.bic = numeric(0)
lambda.bic     = numeric(0)
act.set.bic    = numeric(0)
cond.num.bic   = numeric(0)
max.eigen.bic  = numeric(0)
intercept.bic  = numeric(0)
res.norm.gcv   = numeric(0)
coeff.norm.gcv = numeric(0)
lambda.gcv     = numeric(0)
act.set.gcv    = numeric(0)
cond.num.gcv   = numeric(0)
max.eigen.gcv  = numeric(0)
intercept.gcv  = numeric(0)
# Collect results from all the cores
for (i in 1:n.cores){
lambda.bic     = cbind(lambda.bic, input[[i]]$lambda.bic)
act.set.bic    = cbind(act.set.bic, input[[i]]$act.set.bic)
res.norm.bic   = cbind(res.norm.bic, input[[i]]$res.norm.bic)
coeff.norm.bic = cbind(coeff.norm.bic, input[[i]]$coeff.norm.bic)
cond.num.bic   = cbind(cond.num.bic, input[[i]]$cond.num.bic)
max.eigen.bic  = cbind(max.eigen.bic, input[[i]]$max.eigen.bic)
intercept.bic  = cbind(intercept.bic, input[[i]]$intercept.bic)
lambda.gcv     = cbind(lambda.gcv, input[[i]]$lambda.gcv)
act.set.gcv    = cbind(act.set.gcv, input[[i]]$act.set.gcv)
res.norm.gcv   = cbind(res.norm.gcv, input[[i]]$res.norm.gcv)
coeff.norm.gcv = cbind(coeff.norm.gcv, input[[i]]$coeff.norm.gcv)
cond.num.gcv   = cbind(cond.num.gcv, input[[i]]$cond.num.gcv)
max.eigen.gcv  = cbind(max.eigen.gcv, input[[i]]$max.eigen.gcv)
intercept.gcv  = cbind(intercept.gcv, input[[i]]$intercept.gcv)
}
mean.rn.bic   = apply(res.norm.bic, 1, mean)
mean.cn.bic   = apply(coeff.norm.bic, 1, mean)
mean.lb.bic   = apply(lambda.bic, 1, mean)
mean.as.bic   = apply(act.set.bic, 1, mean)
mean.k.bic    = apply(cond.num.bic, 1, mean)
mean.me.bic   = apply(max.eigen.bic, 1, mean)
mean.b0.bic   = apply(intercept.bic, 1, mean)
med.rn.bic    = apply(res.norm.bic, 1, median)
med.cn.bic    = apply(coeff.norm.bic, 1, median)
med.lb.bic    = apply(lambda.bic, 1, median)
med.as.bic    = apply(act.set.bic, 1, median)
med.k.bic     = apply(cond.num.bic, 1, median)
med.me.bic    = apply(max.eigen.bic, 1, median)
med.b0.bic    = apply(intercept.bic, 1, median)
mean.rn.gcv   = apply(res.norm.gcv, 1, mean)
mean.cn.gcv   = apply(coeff.norm.gcv, 1, mean)
mean.lb.gcv   = apply(lambda.gcv, 1, mean)
mean.as.gcv   = apply(act.set.gcv, 1, mean)
mean.k.gcv    = apply(cond.num.gcv, 1, mean)
mean.me.gcv   = apply(max.eigen.gcv, 1, mean)
mean.b0.gcv   = apply(intercept.gcv, 1, mean)
med.rn.gcv    = apply(res.norm.gcv, 1, median)
med.cn.gcv    = apply(coeff.norm.gcv, 1, median)
med.lb.gcv    = apply(lambda.gcv, 1, median)
med.as.gcv    = apply(act.set.gcv, 1, median)
med.k.gcv     = apply(cond.num.gcv, 1, median)
med.me.gcv    = apply(max.eigen.gcv, 1, median)
med.b0.gcv    = apply(intercept.gcv, 1, median)
values        = list(lambda.bic, act.set.bic, res.norm.bic, coeff.norm.bic, cond.num.bic,
max.eigen.bic, intercept.bic, mean.lb.bic, mean.as.bic, mean.rn.bic,
mean.cn.bic, mean.k.bic, mean.me.bic, mean.b0.bic, med.lb.bic,
med.as.bic, med.rn.bic, med.cn.bic, med.k.bic, med.me.bic,
med.b0.bic, lambda.gcv, act.set.gcv, res.norm.gcv, coeff.norm.gcv,
cond.num.gcv,  max.eigen.gcv, intercept.gcv, mean.lb.gcv,
mean.as.gcv, mean.rn.gcv, mean.cn.gcv, mean.k.gcv, mean.me.gcv,
mean.b0.gcv, med.lb.gcv, med.as.gcv, med.rn.gcv, med.cn.gcv,
med.k.gcv, med.me.gcv, med.b0.gcv)
names(values) = c("lambda.bic", "act.set.bic", "res.norm.bic", "coeff.norm.bic",
"cond.num.bic", "max.eigen.bic", "intercept.bic","mean.lb.bic",
"mean.as.bic", "mean.rn.bic", "mean.cn.bic", "mean.k.bic",
"mean.me.bic", "mean.b0.bic", "med.lb.bic", "med.as.bic", "med.rn.bic",
"med.cn.bic", "med.k.bic", "med.me.bic", "med.b0.bic", "lambda.gcv",
"act.set.gcv", "res.norm.gcv", "coeff.norm.gcv", "cond.num.gcv",
"max.eigen.gcv", "intercept.gcv","mean.lb.gcv", "mean.as.gcv",
"mean.rn.gcv", "mean.cn.gcv", "mean.k.gcv", "mean.me.gcv",
"mean.b0.gcv", "med.lb.gcv", "med.as.gcv", "med.rn.gcv", "med.cn.gcv",
"med.k.gcv", "med.me.gcv", "med.b0.gcv")
return(values)
}
out_frm   = res.Qlasso(n.cores, out_tmp)                   # Collect results from cores
out_frm   = res.Qlasso(n.cores, outfrm_tmp)                   # Collect results from cores
out_frm_tmp
out_frm   = res.Qlasso(n.cores, out_frmtmp)                   # Collect results from cores
stopCluster(cl)
par(mfrow = c(2, 1))
par(mar = c(5, 6, 1, 1))
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
# Lambda chosen by BIC criterion
# All of the simulations
plot(out_frm$lambda.bic[, 1], type = "l",  col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(lambda)),
cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
for (i in 2:n.sim) {
tmp = out_frm$lambda.bic[, i]
lines(tmp, col = alpha("darkblue", 0.1))
}
lines(out_frm$mean.lb.bic, col = "red3")
plot(out_frm$lambda.bic[, 1], type = "l",  col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(lambda)),
cex.lab = 1.8)
libraries = c("MASS", "scales", "foreach", "doParallel", "ald")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)} )
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
plot(out_frm$lambda.bic[, 1], type = "l",  col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(lambda)),
cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
for (i in 2:n.sim) {
tmp = out_frm$lambda.bic[, i]
lines(tmp, col = alpha("darkblue", 0.1))
}
lines(out_frm$mean.lb.bic, col = "red3")
plot(out_frm$lambda.bic[, 1], type = "l",  col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(lambda)),
cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
for (i in 2:n.firm) {
tmp = out_frm$lambda.bic[, i]
lines(tmp, col = alpha("darkblue", 0.1))
}
lines(out_frm$mean.lb.bic, col = "red3")
plot(out_frm$lambda.bic[, 1], type = "l",  col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(lambda)),
cex.lab = 1.8)
par(mfrow = c(2, 1))
par(mar = c(5, 6, 1, 1))
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
par(mfrow = c(2, 1))
par(mar = c(5, 6, 1, 1))
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
grep("2008", dates)[1]
grep("2009", dates)[1] - w
grep("2010", dates)[1] - w
grep("2011", dates)[1] - w
grep("2012", dates)[1] - w
grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w
grep("2015", dates)[1] - w
grep("2016", dates)[1] - w
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
at.tmp = cbind(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
at.tmp = c((grep("2008", dates)[1] - w), (grep("2009", dates)[1] - w),
(grep("2010", dates)[1] - w), (grep("2011", dates)[1] - w),
(grep("2012", dates)[1] - w), (grep("2013", dates)[1] - w),
(grep("2014", dates)[1] - w), (grep("2015", dates)[1] - w),
(grep("2016", dates)[1] - w))
c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w)
c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w)
c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w, grep("2010", dates)[1] - w)
c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w)
c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w, grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w, grep("2010", dates)[1] - w, grep("2011", dates)[1] - w, grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w, grep("2010", dates)[1] - w, grep("2011", dates)[1] - w, grep("2012", dates)[1] - w, grep("2013", dates)[1] - w, grep("2014", dates)[1] - w, grep("2015", dates)[1] - w, grep("2016", dates)[1] - w)
at.tmp
c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w
, grep("2010", dates)[1] - w, grep("2011", dates)[1] - w
, grep("2012", dates)[1] - w, grep("2013", dates)[1] - w
, grep("2014", dates)[1] - w, grep("2015", dates)[1] - w
, grep("2016", dates)[1] - w)
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w, grep("2010", dates)[1] - w, grep("2011", dates)[1] - w, grep("2012", dates)[1] - w, grep("2013", dates)[1] - w, grep("2014", dates)[1] - w, grep("2015", dates)[1] - w, grep("2016", dates)[1] - w)
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w, grep("2010", dates)[1] - w,
grep("2011", dates)[1] - w, grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w, grep("2016", dates)[1] - w)
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w,
grep("2011", dates)[1] - w, grep("2012", dates)[1] - w,
grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w,
grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w,
grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w,
grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
libraries = c("MASS", "scales", "foreach", "doParallel")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)} )
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
source("quantilelasso.r")
libraries = c("MASS", "scales", "foreach", "doParallel")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)} )
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
source("quantilelasso.r")
at.tmp = c(grep("2008", dates)[1] - w, grep("2009", dates)[1] - w,
grep("2010", dates)[1] - w, grep("2011", dates)[1] - w,
grep("2012", dates)[1] - w, grep("2013", dates)[1] - w,
grep("2014", dates)[1] - w, grep("2015", dates)[1] - w,
grep("2016", dates)[1] - w)
plot(out_frm$lambda.bic[, 1], type = "l",  col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(lambda)),
cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
for (i in 2:n.firm) {
tmp = out_frm$lambda.bic[, i]
lines(tmp, col = alpha("darkblue", 0.1))
}
lines(out_frm$mean.lb.bic, col = "red3")
# Average over all of the simulations
plot(out_frm$mean.lb.bic, type = "l",  col = "red3", axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(bar(lambda))),
cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
plot(out_frm$act.set.bic[, 1], type = "l", col = alpha("darkblue", 0.1),
axes = FALSE, xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = "q",
ylim = c(min(out_frm$act.set.bic), max(out_frm$act.set.bic)), cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
for (i in 2:n.firm) {
tmp = out_frm$act.set.bic[, i]
lines(tmp, col = alpha("darkblue", 0.1))
}
lines(out_frm$mean.as.bic, col = "red3")
plot(out_frm$mean.as.bic, type = "l",  col = "red3", axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(bar(q))),
ylim = c(min(out_frm$mean.as.bic), max(out_frm$mean.as.bic)), cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
plot(out_frm$lambda.bic[, 1], type = "l",  col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(lambda)),
cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
for (i in 2:n.firm) {
tmp = out_frm$lambda.bic[, i]
lines(tmp, col = alpha("darkblue", 0.1))
}
lines(out_frm$mean.lb.bic, col = "red3")
# Average over all of the simulations
plot(out_frm$mean.lb.bic, type = "l",  col = "red3", axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste(bar(lambda))),
cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
plot(out_frm$coeff.norm.bic[, 1], type = "l", col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5,
ylab = expression(paste("||", hat(beta), "|| " [1])),
ylim = c(min(out_frm$coeff.norm.bic), max(out_frm$coeff.norm.bic)), cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
for (i in 2:n.firm) {
tmp = out_frm$coeff.norm.bic[, i]
lines(tmp, col = alpha("darkblue", 0.1))
}
lines(out_frm$mean.cn.bic, col = "red3")
# Average over all of the simulations
plot(out_frm$mean.cn.bic, type = "l",  col = "red3", axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5,
ylab = expression(bar(paste("||", hat(beta), "|| " [1]))),
ylim = c(min(out_frm$mean.cn.bic), max(out_frm$mean.cn.bic)), cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
plot(out_frm$res.norm.bic[, 1], type = "l", col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5, ylab = expression(paste("RSS" ^ {1/2})),
ylim = c(min(out_frm$res.norm.bic), max(out_frm$res.norm.bic)), cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
for (i in 2:n.firm) {
tmp = out_frm$res.norm.bic[, i]
lines(tmp, col = alpha("darkblue", 0.1))
}
lines(out_frm$mean.rn.bic, col = "red3")
# Average over all of the simulations
plot(out_frm$mean.rn.bic, type = "l",  col = "red3", axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5,
ylab = expression(bar(paste("RSS" ^ {1/2}))), cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
plot(out_frm$coeff.norm.bic[, 1], type = "l", col = alpha("darkblue", 0.1), axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5,
ylab = expression(paste("||", hat(beta), "|| " [1])),
ylim = c(min(out_frm$coeff.norm.bic), max(out_frm$coeff.norm.bic)), cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
for (i in 2:n.firm) {
tmp = out_frm$coeff.norm.bic[, i]
lines(tmp, col = alpha("darkblue", 0.1))
}
lines(out_frm$mean.cn.bic, col = "red3")
# Average over all of the simulations
plot(out_frm$mean.cn.bic, type = "l",  col = "red3", axes = FALSE,
xlab = "Year", frame = TRUE, cex.main = 1.5,
ylab = expression(bar(paste("||", hat(beta), "|| " [1]))),
ylim = c(min(out_frm$mean.cn.bic), max(out_frm$mean.cn.bic)), cex.lab = 1.8)
axis(1, cex.axis = 1, labels = c(2008:2016), at = at.tmp)
axis(2, cex.axis = 1)
libraries = c("yaml")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)} )
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_FRM")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_LambdaVIX")
yaml.load_file("Metainfo.txt")
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_LambdaSim")
yaml.load_file("Metainfo.txt")
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_BetaChange")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_LmabdaSim")
yaml.load_file("Metainfo.txt")
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_LambdaSim")
yaml.load_file("Metainfo.txt")
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_LambdaVIX")
yaml.load_file("Metainfo.txt")
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_FRM")
yaml.load_file("Metainfo.txt")
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_LambdaSysRisk")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
readLines(input)
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_LambdaSim")
yaml.load_file("Metainfo.txt")
setwd("/Users/Lenka/Documents/IRTG 1792/XFG3_Temp/XFGTVP_LambdaSysRisk")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
rm(list = ls(all = TRUE))
graphics.off()
libraries = c("dplyr", "quantmod")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)} )
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
tmpdata1     = read.csv("XFGTVP_FRMoutput.csv", sep = ",")
lambda.bic   = tmpdata1[, 2]
lambda.gcv   = tmpdata1[, 3]
dates.lambda = as.Date(tmpdata1[, 1], "%d/%m/%Y")
dates.lambda
lambda.bic.norm = (lambda.bic - min(lambda.bic))/(max(lambda.bic) - min(lambda.bic))
lambda.gcv.norm = (lambda.gcv - min(lambda.gcv))/(max(lambda.gcv) - min(lambda.gcv))
rm(list = ls(all = TRUE))
graphics.off()
libraries = c("quantmod")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)} )
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
a    = as.Date(dates.lambda[1], "%d/%m/%Y")
tmpdata1     = read.csv("XFGTVP_FRMoutput.csv", sep = ",")
lambda.bic   = tmpdata1[, 2]
lambda.gcv   = tmpdata1[, 3]
dates.lambda = as.Date(tmpdata1[, 1], "%d/%m/%Y")
# Normalize to interval (0, 1)
lambda.bic.norm = (lambda.bic - min(lambda.bic))/(max(lambda.bic) - min(lambda.bic))
lambda.gcv.norm = (lambda.gcv - min(lambda.gcv))/(max(lambda.gcv) - min(lambda.gcv))
# ----------------------------------------------------------------------------------------
# Download data: VIX and S&P500 indices
a    = as.Date(dates.lambda[1], "%d/%m/%Y")
b    = as.Date(dates.lambda[length(lambda.bic)], "%d/%m/%Y")
